namespace Lumora.Web.Controllers.Authentication
{
    [ApiController]
    [Route("wejha/api/[controller]")]
    public class TowFAManagementController(
        IMapper mapper,
        UserManager<User> userManager,
        ILogger<TowFAManagementController> logger,
        IAuthenticationService authenticationService,
        GeneralMessage messages) : AuthenticatedController
    {
        protected readonly IMapper _mapper = mapper;
        protected readonly UserManager<User> _userManager = userManager;
        private readonly ILogger<TowFAManagementController> _logger = logger;
        private readonly IAuthenticationService _authenticationService = authenticationService;

        /// <summary>
        /// Enables two-factor authentication (2FA) for the currently authenticated user using a provided verification code.
        /// </summary>
        /// <param name="dto">Contains the verification code generated by the authenticator app.</param>
        /// <param name="cancellationToken">Token for cancelling the operation if requested.</param>
        /// <returns>
        /// Returns 200 OK with a <see cref="GeneralResult"/> if 2FA is enabled successfully.
        /// Returns 400 Bad Request if the verification code is invalid or already used.
        /// Returns 404 Not Found if the user does not exist.
        /// Returns 500 Internal Server Error if an unexpected error occurs during 2FA activation.
        /// </returns>
        [HttpPost("enable")]
        [Authorize]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status404NotFound)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status422UnprocessableEntity)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> Enable2FA([FromBody] Enable2FADto dto, CancellationToken cancellationToken)
        {
            try
            {
                var userCheck = CheckUserOrUnauthorized();
                if (userCheck != null) return userCheck;

                var modelCheck = this.ValidateModelState(_logger);
                if (modelCheck != null) return modelCheck;

                dto.UserId = CurrentUserId;
                var result = await _authenticationService.EnableTwoFactorAuthAsync(dto, cancellationToken);
                if (result.IsSuccess == false)
                {
                    return result.ErrorType switch
                    {
                        ErrorType.BadRequest => BadRequest(result),
                        ErrorType.NotFound => NotFound(result),
                        ErrorType.InternalServerError => StatusCode(500, result),
                        _ => BadRequest(result)
                    };
                }

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Enable-2FA - An Unexpected error occurred while enable 2FA.");
                return StatusCode(500,
                    new GeneralResult { IsSuccess = false, Message = messages.GetUnexpectedErrorMessage("enable 2FA."), Data = null });
            }
        }

        /// <summary>
        /// Disables two-factor authentication (2FA) for the currently authenticated user.
        /// </summary>
        /// <param name="cancellationToken">Token for cancelling the operation if requested.</param>
        /// <returns>
        /// Returns 200 OK with a <see cref="GeneralResult"/> if 2FA is disabled successfully.
        /// Returns 400 Bad Request if the operation is invalid or user has no active 2FA.
        /// Returns 404 Not Found if the user does not exist.
        /// Returns 500 Internal Server Error if an unexpected error occurs during 2FA deactivation.
        /// </returns>
        [HttpPost("disable")]
        [Authorize]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status404NotFound)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status422UnprocessableEntity)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> Disable2FA(CancellationToken cancellationToken)
        {
            try
            {
                var userCheck = CheckUserOrUnauthorized();
                if (userCheck != null) return userCheck;

                var modelCheck = this.ValidateModelState(_logger);
                if (modelCheck != null) return modelCheck;

                var result = await _authenticationService.DisableTwoFactorAuthAsync(CurrentUserId!, cancellationToken);
                if (result.IsSuccess == false)
                {
                    return result.ErrorType switch
                    {
                        ErrorType.BadRequest => BadRequest(result),
                        ErrorType.NotFound => NotFound(result),
                        ErrorType.InternalServerError => StatusCode(500, result),
                        _ => BadRequest(result)
                    };
                }

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Disable-2FA - An Unexpected error occurred while disable 2FA.");
                return StatusCode(500,
                    new GeneralResult { IsSuccess = false, Message = messages.GetUnexpectedErrorMessage("disable 2FA."), Data = null });
            }
        }

        /// <summary>
        /// Authenticates a user using a two-factor authentication (2FA) verification code after primary login.
        /// </summary>
        /// <param name="dto">Contains the user identifier and the 2FA verification code.</param>
        /// <param name="cancellationToken">Token for cancelling the operation if requested.</param>
        /// <returns>
        /// Returns 200 OK with a <see cref="GeneralResult"/> containing authentication data if verification is successful.
        /// Returns 400 Bad Request if the verification code is invalid or expired.
        /// Returns 404 Not Found if the user does not exist or is not in a 2FA-required state.
        /// Returns 500 Internal Server Error if an unexpected error occurs during 2FA login.
        /// </returns>
        [HttpPost("login")]
        [AllowAnonymous]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status404NotFound)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status422UnprocessableEntity)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> LoginWith2FA([FromBody] Login2FADto dto, CancellationToken cancellationToken)
        {
            try
            {
                var modelCheck = this.ValidateModelState(_logger);
                if (modelCheck != null) return modelCheck;

                dto.UserId = CurrentUserId;
                var result = await _authenticationService.LoginWith2FACodeAsync(dto, cancellationToken);
                if (result.IsSuccess == false)
                {
                    return result.ErrorType switch
                    {
                        ErrorType.BadRequest => BadRequest(result),
                        ErrorType.NotFound => NotFound(result),
                        ErrorType.InternalServerError => StatusCode(500, result),
                        _ => BadRequest(result)
                    };
                }

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Login-2FA - An Unexpected error occurred while login 2FA.");
                return StatusCode(500,
                    new GeneralResult { IsSuccess = false, Message = messages.GetUnexpectedErrorMessage("login 2FA."), Data = null });
            }
        }

        /// <summary>
        /// Retrieves setup information for configuring a two-factor authentication (2FA) app (e.g., QR code, secret key).
        /// </summary>
        /// <param name="cancellationToken">Token for cancelling the operation if requested.</param>
        /// <returns>
        /// Returns 200 OK with a <see cref="GeneralResult"/> containing 2FA setup details for the current user.
        /// Returns 400 Bad Request if setup cannot be initialized.
        /// Returns 404 Not Found if the user does not exist.
        /// Returns 500 Internal Server Error if an unexpected error occurs while generating 2FA setup data.
        /// </returns>
        [HttpGet("setup")]
        [Authorize]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status404NotFound)]
        [ProducesResponseType(typeof(GeneralResult), StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> Get2FASetup(CancellationToken cancellationToken)
        {
            try
            {
                var userCheck = CheckUserOrUnauthorized();
                if (userCheck != null) return userCheck;

                var result = await _authenticationService.GetTwoFactorSetupAsync(CurrentUserId!, cancellationToken);
                if (result.IsSuccess == false)
                {
                    return result.ErrorType switch
                    {
                        ErrorType.BadRequest => BadRequest(result),
                        ErrorType.NotFound => NotFound(result),
                        ErrorType.InternalServerError => StatusCode(500, result),
                        _ => BadRequest(result)
                    };
                }

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Setup-2FA - An Unexpected error occurred while setup 2FA.");
                return StatusCode(500,
                    new GeneralResult { IsSuccess = false, Message = messages.GetUnexpectedErrorMessage("setup 2FA."), Data = null });
            }
        }
    }
}
