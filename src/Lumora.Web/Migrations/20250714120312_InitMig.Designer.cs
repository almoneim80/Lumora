// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Lumora.Data;
using Lumora.Entities;

#nullable disable

namespace Lumora.Web.Migrations
{
    [DbContext(typeof(PgDbContext))]
    [Migration("20250714120312_InitMig")]
    partial class InitMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<int>("EntityState")
                        .HasColumnType("integer")
                        .HasColumnName("entity_state");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("new_values");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("object_id");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("object_type");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("old_values");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("Id")
                        .HasName("pk_change_log");

                    b.ToTable("change_log", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.ChangeLogTaskLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<int>("ChangeLogIdMax")
                        .HasColumnType("integer")
                        .HasColumnName("change_log_id_max");

                    b.Property<int>("ChangeLogIdMin")
                        .HasColumnType("integer")
                        .HasColumnName("change_log_id_min");

                    b.Property<int>("ChangesProcessed")
                        .HasColumnType("integer")
                        .HasColumnName("changes_processed");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_name");

                    b.HasKey("Id")
                        .HasName("pk_change_log_task_log");

                    b.ToTable("change_log_task_log", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("Address1")
                        .HasColumnType("text")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasColumnType("text")
                        .HasColumnName("address2");

                    b.Property<DateTimeOffset?>("Birthday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<string>("CityName")
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<int?>("ContinentCode")
                        .HasColumnType("integer")
                        .HasColumnName("continent_code");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("integer")
                        .HasColumnName("country_code");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Department")
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<int>("DomainId")
                        .HasColumnType("integer")
                        .HasColumnName("domain_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Prefix")
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.Property<Dictionary<string, string>>("SocialMedia")
                        .HasColumnType("jsonb")
                        .HasColumnName("social_media");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<int?>("Timezone")
                        .HasColumnType("integer")
                        .HasColumnName("timezone");

                    b.Property<int?>("UnsubscribeId")
                        .HasColumnType("integer")
                        .HasColumnName("unsubscribe_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Zip")
                        .HasColumnType("text")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("pk_contact");

                    b.HasIndex("DomainId")
                        .HasDatabaseName("ix_contact_domain_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_contact_email");

                    b.HasIndex("UnsubscribeId")
                        .IsUnique()
                        .HasDatabaseName("ix_contact_unsubscribe_id");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.ContactEmailSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_contact_email_schedule");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_contact_email_schedule_contact_id");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("ix_contact_email_schedule_schedule_id");

                    b.ToTable("contact_email_schedule", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer")
                        .HasColumnName("account_status");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<bool?>("CatchAll")
                        .HasColumnType("boolean")
                        .HasColumnName("catch_all");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Disposable")
                        .HasColumnType("boolean")
                        .HasColumnName("disposable");

                    b.Property<bool?>("DnsCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("dns_check");

                    b.Property<List<DnsRecord>>("DnsRecords")
                        .HasColumnType("jsonb")
                        .HasColumnName("dns_records");

                    b.Property<string>("FaviconUrl")
                        .HasColumnType("text")
                        .HasColumnName("favicon_url");

                    b.Property<bool?>("Free")
                        .HasColumnType("boolean")
                        .HasColumnName("free");

                    b.Property<bool?>("HttpCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("http_check");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool?>("MxCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("mx_check");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_domain");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_domain_name");

                    b.ToTable("domain", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.EmailGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_email_group");

                    b.ToTable("email_group", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_email");

                    b.Property<string>("HtmlBody")
                        .HasColumnType("text")
                        .HasColumnName("html_body");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_id");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipients");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.Property<string>("TextBody")
                        .HasColumnType("text")
                        .HasColumnName("text_body");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_email_log");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_email_log_contact_id");

                    b.ToTable("email_log", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.EmailSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schedule");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_email_schedule");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_email_schedule_group_id");

                    b.ToTable("email_schedule", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyTemplate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body_template");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EmailGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("email_group_id");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_email");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<int>("RetryInterval")
                        .HasColumnType("integer")
                        .HasColumnName("retry_interval");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_email_template");

                    b.HasIndex("EmailGroupId")
                        .HasDatabaseName("ix_email_template_email_group_id");

                    b.ToTable("email_template", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.IpDetails", b =>
                {
                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<int>("ContinentCode")
                        .HasColumnType("integer")
                        .HasColumnName("continent_code");

                    b.Property<int>("CountryCode")
                        .HasColumnType("integer")
                        .HasColumnName("country_code");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.HasKey("Ip")
                        .HasName("pk_ip_details");

                    b.HasIndex("Ip")
                        .IsUnique()
                        .HasDatabaseName("ix_ip_details_ip");

                    b.ToTable("ip_details", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.MailServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("HeloMessage")
                        .HasColumnType("text")
                        .HasColumnName("helo_message");

                    b.Property<string>("JoinMessage")
                        .HasColumnType("text")
                        .HasColumnName("join_message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.Property<bool>("WellKnown")
                        .HasColumnType("boolean")
                        .HasColumnName("well_known");

                    b.HasKey("Id")
                        .HasName("pk_mail_server");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_mail_server_name");

                    b.ToTable("mail_server", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.SmsTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sms_templates");

                    b.ToTable("sms_templates", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.StaticContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<int>("ContentType")
                        .HasColumnType("integer")
                        .HasColumnName("content_type");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Group")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("group");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("key");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("language");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("MediaAlt")
                        .HasColumnType("text")
                        .HasColumnName("media_alt");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer")
                        .HasColumnName("media_type");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text")
                        .HasColumnName("media_url");

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("note");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_static_contents");

                    b.HasIndex("Key", "Language")
                        .IsUnique()
                        .HasDatabaseName("ix_static_contents_key_language");

                    b.ToTable("static_contents", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ClubAmbassador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<int?>("ClubPostId")
                        .HasColumnType("integer")
                        .HasColumnName("club_post_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_club_ambassadors");

                    b.HasIndex("ClubPostId")
                        .HasDatabaseName("ix_club_ambassadors_club_post_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_club_ambassadors_user_id");

                    b.ToTable("club_ambassadors", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ClubPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<string>("ApprovedById")
                        .HasColumnType("text")
                        .HasColumnName("approved_by_id");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("media_type");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text")
                        .HasColumnName("media_url");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_club_posts");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_club_posts_user_id");

                    b.ToTable("club_posts", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ClubPostLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<int>("ClubPostId")
                        .HasColumnType("integer")
                        .HasColumnName("club_post_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_club_post_likes");

                    b.HasIndex("ClubPostId")
                        .HasDatabaseName("ix_club_post_likes_club_post_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_club_post_likes_user_id");

                    b.ToTable("club_post_likes", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.CourseLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_minutes");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<int>("ProgramCourseId")
                        .HasColumnType("integer")
                        .HasColumnName("program_course_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_course_lessons");

                    b.HasIndex("ProgramCourseId")
                        .HasDatabaseName("ix_course_lessons_program_course_id");

                    b.ToTable("course_lessons", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Employer")
                        .HasColumnType("text")
                        .HasColumnName("employer");

                    b.Property<string>("EmployerInfo")
                        .HasColumnType("text")
                        .HasColumnName("employer_info");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("job_type");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<DateTimeOffset>("PostedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_at");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("salary");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WorkplaceCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("workplace_category");

                    b.HasKey("Id")
                        .HasName("pk_jobs");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicantUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("applicant_user_id");

                    b.Property<DateTimeOffset>("AppliedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("applied_at");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<string>("CoverLetter")
                        .HasColumnType("text")
                        .HasColumnName("cover_letter");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    b.Property<string>("ResumeUrl")
                        .HasColumnType("text")
                        .HasColumnName("resume_url");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_job_applications");

                    b.HasIndex("ApplicantUserId")
                        .HasDatabaseName("ix_job_applications_applicant_user_id");

                    b.HasIndex("JobId")
                        .HasDatabaseName("ix_job_applications_job_id");

                    b.ToTable("job_applications", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.LessonAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<int>("OpenCount")
                        .HasColumnType("integer")
                        .HasColumnName("open_count");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_lesson_attachments");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_lesson_attachments_lesson_id");

                    b.ToTable("lesson_attachments", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.LessonProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<TimeSpan>("TimeSpent")
                        .HasColumnType("interval")
                        .HasColumnName("time_spent");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lesson_progresses");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_lesson_progresses_lesson_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lesson_progresses_user_id");

                    b.ToTable("lesson_progresses", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.LessonSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lesson_sessions");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_lesson_sessions_lesson_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lesson_sessions_user_id");

                    b.ToTable("lesson_sessions", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.LiveCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Lecturer")
                        .HasColumnType("text")
                        .HasColumnName("lecturer");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("StudyWay")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("study_way");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_live_courses");

                    b.ToTable("live_courses", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("currency");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("GatewayReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("gateway_reference_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<DateTimeOffset?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<int>("PaymentGateway")
                        .HasColumnType("integer")
                        .HasColumnName("payment_gateway");

                    b.Property<int>("PaymentPurpose")
                        .HasColumnType("integer")
                        .HasColumnName("payment_purpose");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("promo_code_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("PromoCodeId")
                        .HasDatabaseName("ix_payments_promo_code_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_payments_user_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.PaymentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer")
                        .HasColumnName("item_type");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_payment_items");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_payment_items_payment_id");

                    b.ToTable("payment_items", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.PodcastEpisode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer")
                        .HasColumnName("episode_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("YoutubeUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("youtube_url");

                    b.HasKey("Id")
                        .HasName("pk_podcast_episodes");

                    b.ToTable("podcast_episodes", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ProgramCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<string>("CertificateId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("certificate_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_method");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("integer")
                        .HasColumnName("enrollment_id");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("text")
                        .HasColumnName("issued_by");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text")
                        .HasColumnName("shipping_address");

                    b.Property<string>("ShippingStatus")
                        .HasColumnType("text")
                        .HasColumnName("shipping_status");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("text")
                        .HasColumnName("verification_code");

                    b.Property<DateTimeOffset?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.HasKey("Id")
                        .HasName("pk_program_certificates");

                    b.HasIndex("EnrollmentId")
                        .IsUnique()
                        .HasDatabaseName("ix_program_certificates_enrollment_id");

                    b.ToTable("program_certificates", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ProgramCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer")
                        .HasColumnName("program_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_program_courses");

                    b.HasIndex("ProgramId")
                        .HasDatabaseName("ix_program_courses_program_id");

                    b.ToTable("program_courses", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ProgramEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset?>("EnrolledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrolled_at");

                    b.Property<string>("EnrollmentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("enrollment_status");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer")
                        .HasColumnName("program_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_program_enrollments");

                    b.HasIndex("ProgramId")
                        .HasDatabaseName("ix_program_enrollments_program_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_program_enrollments_user_id");

                    b.ToTable("program_enrollments", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<decimal>("CommissionPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("commission_percentage");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_percentage");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean")
                        .HasColumnName("is_manual");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer")
                        .HasColumnName("training_program_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_promo_codes");

                    b.HasIndex("TrainingProgramId")
                        .HasDatabaseName("ix_promo_codes_training_program_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_promo_codes_user_id");

                    b.ToTable("promo_codes", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.PromoCodeUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    b.Property<int>("PromoCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("promo_code_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTimeOffset>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.HasKey("Id")
                        .HasName("pk_promo_code_usages");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_promo_code_usages_payment_id");

                    b.HasIndex("PromoCodeId")
                        .HasDatabaseName("ix_promo_code_usages_promo_code_id");

                    b.ToTable("promo_code_usages", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("reason");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_refunds");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_refunds_payment_id");

                    b.ToTable("refunds", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.SmsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipient");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_sms_log");

                    b.ToTable("sms_log", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_minutes");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("max_attempts");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<decimal>("TotalMark")
                        .HasColumnType("numeric")
                        .HasColumnName("total_mark");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tests");

                    b.HasIndex("LessonId")
                        .IsUnique()
                        .HasDatabaseName("ix_tests_lesson_id");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SelectedChoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("selected_choice_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("TestAttemptId")
                        .HasColumnType("integer")
                        .HasColumnName("test_attempt_id");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("test_question_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_test_answers");

                    b.HasIndex("SelectedChoiceId")
                        .HasDatabaseName("ix_test_answers_selected_choice_id");

                    b.HasIndex("TestAttemptId")
                        .HasDatabaseName("ix_test_answers_test_attempt_id");

                    b.HasIndex("TestQuestionId")
                        .HasDatabaseName("ix_test_answers_test_question_id");

                    b.ToTable("test_answers", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_passed");

                    b.Property<bool>("IsValidSubmission")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid_submission");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<DateTimeOffset?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.Property<decimal>("TotalMark")
                        .HasColumnType("numeric")
                        .HasColumnName("total_mark");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_test_attempts");

                    b.HasIndex("TestId")
                        .HasDatabaseName("ix_test_attempts_test_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_test_attempts_user_id");

                    b.ToTable("test_attempts", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("test_question_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_test_choices");

                    b.HasIndex("TestQuestionId", "DisplayOrder")
                        .IsUnique()
                        .HasDatabaseName("ix_test_choices_test_question_id_display_order");

                    b.ToTable("test_choices", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("Mark")
                        .HasColumnType("numeric")
                        .HasColumnName("mark");

                    b.Property<string>("QuestionText")
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_test_questions");

                    b.HasIndex("TestId", "DisplayOrder")
                        .IsUnique()
                        .HasDatabaseName("ix_test_questions_test_id_display_order");

                    b.ToTable("test_questions", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TraineeProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<double>("CompletionPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("completion_percentage");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<int?>("CourseType")
                        .HasColumnType("integer")
                        .HasColumnName("course_type");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("integer")
                        .HasColumnName("program_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<TimeSpan>("TotalTimeSpent")
                        .HasColumnType("interval")
                        .HasColumnName("total_time_spent");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_trainee_progresses");

                    b.HasIndex("ProgramId")
                        .HasDatabaseName("ix_trainee_progresses_program_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_trainee_progresses_user_id");

                    b.ToTable("trainee_progresses", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Audience")
                        .HasColumnType("text")
                        .HasColumnName("audience");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<int>("CertificateValidityInMonth")
                        .HasColumnType("integer")
                        .HasColumnName("certificate_validity_in_month");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount");

                    b.Property<string>("Goals")
                        .HasColumnType("text")
                        .HasColumnName("goals");

                    b.Property<bool>("HasCertificateExpiration")
                        .HasColumnType("boolean")
                        .HasColumnName("has_certificate_expiration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Outcomes")
                        .HasColumnType("text")
                        .HasColumnName("outcomes");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Topics")
                        .HasColumnType("text")
                        .HasColumnName("topics");

                    b.Property<string>("Trainers")
                        .HasColumnType("text")
                        .HasColumnName("trainers");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_training_programs");

                    b.ToTable("training_programs", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AboutMe")
                        .HasColumnType("text")
                        .HasColumnName("about_me");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("text")
                        .HasColumnName("additional_data");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DeActiveReason")
                        .HasColumnType("text")
                        .HasColumnName("de_active_reason");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastTimeLoggedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_time_logged_in");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("Sex")
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.UserLiveCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LiveCourseId")
                        .HasColumnType("integer")
                        .HasColumnName("live_course_id");

                    b.Property<int>("PaymentItemId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_item_id");

                    b.Property<DateTimeOffset>("RegisteredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_at");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_live_courses");

                    b.HasIndex("LiveCourseId")
                        .HasDatabaseName("ix_user_live_courses_live_course_id");

                    b.HasIndex("PaymentItemId")
                        .HasDatabaseName("ix_user_live_courses_payment_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_live_courses_user_id");

                    b.ToTable("user_live_courses", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.WheelAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("PointsAmount")
                        .HasColumnType("integer")
                        .HasColumnName("points_amount");

                    b.Property<decimal?>("Probability")
                        .HasColumnType("numeric")
                        .HasColumnName("probability");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_wheel_awards");

                    b.ToTable("wheel_awards", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.WheelPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AwardId")
                        .HasColumnType("integer")
                        .HasColumnName("award_id");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("text")
                        .HasColumnName("device_info");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delivered");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean")
                        .HasColumnName("is_free");

                    b.Property<DateTimeOffset?>("PlayedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("played_at");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_wheel_players");

                    b.HasIndex("AwardId")
                        .HasDatabaseName("ix_wheel_players_award_id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_wheel_players_player_id");

                    b.ToTable("wheel_players", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Tables.WheelPlayerState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowPaidSpin")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_paid_spin");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("HasUsedFreeSpin")
                        .HasColumnType("boolean")
                        .HasColumnName("has_used_free_spin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_id");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_wheel_player_states");

                    b.ToTable("wheel_player_states", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.TaskExecutionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_execution_time");

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<DateTime>("ScheduledExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_execution_time");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_name");

                    b.HasKey("Id")
                        .HasName("pk_task_execution_log");

                    b.ToTable("task_execution_log", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.Unsubscribe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByAgent")
                        .HasColumnType("text")
                        .HasColumnName("by_agent");

                    b.Property<string>("ById")
                        .HasColumnType("text")
                        .HasColumnName("by_id");

                    b.Property<string>("ByIp")
                        .HasColumnType("text")
                        .HasColumnName("by_ip");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTimeOffset?>("SoftDeleteExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_delete_expiration");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_unsubscribe");

                    b.ToTable("unsubscribe", (string)null);
                });

            modelBuilder.Entity("Lumora.Entities.UserStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("new_status");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_status_histories");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_status_histories_user_id");

                    b.ToTable("user_status_histories", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Lumora.Entities.Tables.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("Lumora.Entities.Contact", b =>
                {
                    b.HasOne("Lumora.Entities.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_contact_domain_domain_id");

                    b.HasOne("Lumora.Entities.Unsubscribe", "Unsubscribe")
                        .WithOne("Contact")
                        .HasForeignKey("Lumora.Entities.Contact", "UnsubscribeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_contact_unsubscribe_unsubscribe_id");

                    b.Navigation("Domain");

                    b.Navigation("Unsubscribe");
                });

            modelBuilder.Entity("Lumora.Entities.ContactEmailSchedule", b =>
                {
                    b.HasOne("Lumora.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_email_schedule_contact_contact_id");

                    b.HasOne("Lumora.Entities.EmailSchedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_email_schedule_email_schedule_schedule_id");

                    b.Navigation("Contact");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Lumora.Entities.EmailLog", b =>
                {
                    b.HasOne("Lumora.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_email_log_contact_contact_id");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Lumora.Entities.EmailSchedule", b =>
                {
                    b.HasOne("Lumora.Entities.EmailGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_schedule_email_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Lumora.Entities.EmailTemplate", b =>
                {
                    b.HasOne("Lumora.Entities.EmailGroup", "EmailGroup")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("EmailGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_template_email_group_email_group_id");

                    b.Navigation("EmailGroup");
                });

            modelBuilder.Entity("Lumora.Entities.RefreshToken", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ClubAmbassador", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.ClubPost", "ClubPost")
                        .WithMany()
                        .HasForeignKey("ClubPostId")
                        .HasConstraintName("fk_club_ambassadors_club_posts_club_post_id");

                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_club_ambassadors_users_user_id");

                    b.Navigation("ClubPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ClubPost", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_club_posts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ClubPostLike", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.ClubPost", "ClubPost")
                        .WithMany("Likes")
                        .HasForeignKey("ClubPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_club_post_likes_club_posts_club_post_id");

                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_club_post_likes_users_user_id");

                    b.Navigation("ClubPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.CourseLesson", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.ProgramCourse", "ProgramCourse")
                        .WithMany("Lessons")
                        .HasForeignKey("ProgramCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_lessons_program_courses_program_course_id");

                    b.Navigation("ProgramCourse");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.JobApplication", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.User", "ApplicantUser")
                        .WithMany("JobApplications")
                        .HasForeignKey("ApplicantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_applications_users_applicant_user_id");

                    b.HasOne("Lumora.Entities.Tables.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_applications_jobs_job_id");

                    b.Navigation("ApplicantUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.LessonAttachment", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.CourseLesson", "CourseLesson")
                        .WithMany("LessonAttachments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_attachments_course_lessons_lesson_id");

                    b.Navigation("CourseLesson");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.LessonProgress", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.CourseLesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_progresses_course_lessons_lesson_id");

                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_progresses_users_user_id");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.LessonSession", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.CourseLesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_sessions_course_lessons_lesson_id");

                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_sessions_users_user_id");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.Payment", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .HasConstraintName("fk_payments_promo_codes_promo_code_id");

                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_users_user_id");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.PaymentItem", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.Payment", "Payment")
                        .WithMany("Items")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_items_payments_payment_id");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ProgramCertificate", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.ProgramEnrollment", "ProgramEnrollment")
                        .WithOne("Certificate")
                        .HasForeignKey("Lumora.Entities.Tables.ProgramCertificate", "EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_program_certificates_program_enrollments_enrollment_id");

                    b.Navigation("ProgramEnrollment");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ProgramCourse", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.TrainingProgram", "TrainingProgram")
                        .WithMany("ProgramCourses")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_program_courses_training_programs_program_id");

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ProgramEnrollment", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.TrainingProgram", "TrainingProgram")
                        .WithMany("ProgramEnrollments")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_program_enrollments_training_programs_program_id");

                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany("ProgramEnrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_program_enrollments_users_user_id");

                    b.Navigation("TrainingProgram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.PromoCode", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.TrainingProgram", "TrainingProgram")
                        .WithMany()
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_promo_codes_training_programs_training_program_id");

                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_promo_codes_users_user_id");

                    b.Navigation("TrainingProgram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.PromoCodeUsage", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_promo_code_usages_payments_payment_id");

                    b.HasOne("Lumora.Entities.Tables.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_promo_code_usages_promo_codes_promo_code_id");

                    b.Navigation("Payment");

                    b.Navigation("PromoCode");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.Refund", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.Payment", "Payment")
                        .WithMany("Refunds")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refunds_payments_payment_id");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.Test", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.CourseLesson", "CourseLesson")
                        .WithOne("LessonTest")
                        .HasForeignKey("Lumora.Entities.Tables.Test", "LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tests_course_lessons_lesson_id");

                    b.Navigation("CourseLesson");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestAnswer", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.TestChoice", "TestChoice")
                        .WithMany("Answers")
                        .HasForeignKey("SelectedChoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_test_answers_test_choices_selected_choice_id");

                    b.HasOne("Lumora.Entities.Tables.TestAttempt", "TestAttempt")
                        .WithMany("Answers")
                        .HasForeignKey("TestAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_test_answers_test_attempts_test_attempt_id");

                    b.HasOne("Lumora.Entities.Tables.TestQuestion", "TestQuestion")
                        .WithMany()
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_test_answers_test_questions_test_question_id");

                    b.Navigation("TestAttempt");

                    b.Navigation("TestChoice");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestAttempt", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.Test", "Test")
                        .WithMany("Attempts")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_test_attempts_tests_test_id");

                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany("TestAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_test_attempts_users_user_id");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestChoice", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.TestQuestion", "TestQuestion")
                        .WithMany("Choices")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_test_choices_test_questions_test_question_id");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestQuestion", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_test_questions_tests_test_id");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TraineeProgress", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.TrainingProgram", "Program")
                        .WithMany("TraineeProgresses")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("fk_trainee_progresses_training_programs_program_id");

                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany("StudentProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_trainee_progresses_users_user_id");

                    b.Navigation("Program");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.UserLiveCourse", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.LiveCourse", "LiveCourse")
                        .WithMany("UserLiveCourses")
                        .HasForeignKey("LiveCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_live_courses_live_courses_live_course_id");

                    b.HasOne("Lumora.Entities.Tables.PaymentItem", "PaymentItem")
                        .WithMany()
                        .HasForeignKey("PaymentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_live_courses_payment_items_payment_item_id");

                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_live_courses_users_user_id");

                    b.Navigation("LiveCourse");

                    b.Navigation("PaymentItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.WheelPlayer", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.WheelAward", "Award")
                        .WithMany("WheelPlayers")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wheel_players_wheel_awards_award_id");

                    b.HasOne("Lumora.Entities.Tables.User", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wheel_players_users_player_id");

                    b.Navigation("Award");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Lumora.Entities.UserStatusHistory", b =>
                {
                    b.HasOne("Lumora.Entities.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_status_histories_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumora.Entities.EmailGroup", b =>
                {
                    b.Navigation("EmailTemplates");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ClubPost", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.CourseLesson", b =>
                {
                    b.Navigation("LessonAttachments");

                    b.Navigation("LessonTest");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.LiveCourse", b =>
                {
                    b.Navigation("UserLiveCourses");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.Payment", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ProgramCourse", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.ProgramEnrollment", b =>
                {
                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.Test", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestAttempt", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestChoice", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TestQuestion", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.TrainingProgram", b =>
                {
                    b.Navigation("ProgramCourses");

                    b.Navigation("ProgramEnrollments");

                    b.Navigation("TraineeProgresses");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.User", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("Payments");

                    b.Navigation("ProgramEnrollments");

                    b.Navigation("StudentProgresses");

                    b.Navigation("TestAttempts");
                });

            modelBuilder.Entity("Lumora.Entities.Tables.WheelAward", b =>
                {
                    b.Navigation("WheelPlayers");
                });

            modelBuilder.Entity("Lumora.Entities.Unsubscribe", b =>
                {
                    b.Navigation("Contact");
                });
#pragma warning restore 612, 618
        }
    }
}
